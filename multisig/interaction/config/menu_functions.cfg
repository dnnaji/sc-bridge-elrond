#!/bin/bash
set -e

source $SCRIPTPATH/config/aggregator-snippets.sh
source $SCRIPTPATH/config/issue-tokens-snippets.sh
source $SCRIPTPATH/config/multisig-snippets.sh
source $SCRIPTPATH/config/multitransfer-snippets.sh
source $SCRIPTPATH/config/relayers-snippets.sh
source $SCRIPTPATH/config/upgrade-snippets.sh
source $SCRIPTPATH/config/wrapped-snippets.sh

function confirmation {
  FUNC="$1"
  echo -e 
  read -p "Do you want to go on with "${FUNC}" (Default No) ? (Yy/Nn)" yn
  echo -e
  
  case $yn in
      [Yy]* )
      
      echo -e "${GREEN}Proceeding with "${FUNC}"!${NC}"
      ${FUNC}
        ;;
      [Nn]* )
      echo -e "${GREEN}Exiting...${NC}"
        ;;
            
      * )
      echo -e "${GREEN}I'll take that as a no then... ${NC}"
        ;;
  esac
}

function confirmation-with-skip {
  FUNC="$1"
  echo -e 
  read -p "Do you want to go on with "${FUNC}" (Default No) ? (Yy/Nn)" yn
  echo -e
  
  case $yn in
      [Yy]* )
      
      echo -e "${GREEN}Proceeding with "${FUNC}"!${NC}"
      ${FUNC}
        ;;
      [Nn]* )
        ;;
            
      * )
      echo -e "${GREEN}I'll take that as a no then... ${NC}"
        ;;
  esac
}

function continue-confirmation {
  FUNC="$1"
  echo -e 
  read -p "Enter any key to continue with "${FUNC}"" yn
  echo -e
  
  ${FUNC}
}

function continue-or-skip-confirmation {
  FUNC="$1"
  echo -e 
  read -p "Enter any key to continue with "${FUNC}"" yn
  echo -e
  
  ${FUNC}
}

function update-config {
  TARGET_KEY=$1
  REPLACEMENT_VALUE=$2
  sed "s/^$TARGET_KEY=.*/$TARGET_KEY=$REPLACEMENT_VALUE/" $CONFIG_FILE > $SCRIPTPATH/config/temp.x
  mv $SCRIPTPATH/config/temp.x "$CONFIG_FILE"
}

function deploy-aggregator {
  deployAggregator
  update-config AGGREGATOR ${ADDRESS}
  continue-confirmation submitAggregatorBatch

  echo -e 
  echo "Aggregator deployed!"
  echo -e 
}

function deploy-wrapper {
  deployBridgedTokensWrapper
  update-config BRIDGED_TOKENS_WRAPPER ${ADDRESS}
}

function whitelist-token {
  echo -e 
  echo "PREREQUIREMENTS: BRIDGED_TOKENS_WRAPPER needs to have MINT+BURN role for the UNIVERSAL TOKEN"
  echo "Check and update TOKENS SETTINGS section in configs.cfg"
  source $SCRIPTPATH/config/configs.cfg
  echo -e
  confirmation-with-skip issueUniversalToken
  confirmation-with-skip setLocalRolesBridgedTokensWrapper
  confirmation-with-skip issueChainSpecificToken
  confirmation-with-skip transferToSC
  echo -e 
  echo "Update TOKENS TO BE WHITELISTED section in configs.cfg with the SC"
  echo -e
  source $SCRIPTPATH/config/configs.cfg
  continue-confirmation addWrappedToken
  continue-confirmation wrapper--whitelistToken
  continue-confirmation setLocalRolesEsdtSafe
  continue-confirmation setLocalRolesMultiTransferEsdt
  continue-confirmation addMapping
  continue-confirmation addTokenToWhitelist
}

function upgrade {
  
  paths
  go_lang
  compare_config_versions  
  #Check if the same env is used
  env_change_check

  echo -e 
  read -p "Do you want to go on with the upgrade (Default No) ? (Yy/Nn)" yn
  echo -e
  
  case $yn in
      [Yy]* )
      #Remove previously cloned repos
      if [ -d "$GOPATH/src/github.com/ElrondNetwork/elrond-eth-bridge" ]; then sudo rm -rf $GOPATH/src/github.com/ElrondNetwork/elrond-*; echo -e; echo -e "${RED}--> Repos present. Removing and fetching again...${NC}"; echo -e; fi
          check_api_limit
          git_clone
          build_relayer
          #Check if service is running
          sudo systemctl is-active --quiet elrond-eth-bridge.service && sudo systemctl stop elrond-eth-bridge.service
          update
          echo -e
          echo -e "${CYAN}--> bridge-relayer upgraded. Don't forget to start it...${NC}"
          echo -e

        ;;
            
      [Nn]* )
      echo -e "${GREEN}Fine ! Skipping upgrade on this machine...${NC}"
        ;;
            
      * )
      echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
        ;;
  esac

}

function start {

  #Check if the same env is used
  env_change_check

  echo -e
  read -p "Do you want to start the Elrond bridge-relayer ? (Yy/Nn)" yn
  echo -e
  case $yn in
       [Yy]* )
            echo -e
            echo -e "${GREEN}Starting Elrond bridge-relayer binary on host ${CYAN}$HOST${GREEN}...${NC}"
            echo -e
            sudo systemctl start elrond-eth-bridge.service
            ;;
            
       [Nn]* )
            echo -e "${GREEN}Ok... exiting...${NC}"
            ;;

           * )
           echo -e "${GREEN}You have to either choose Yy or Nn... exiting...${NC}"
            ;;
      esac  

}

function stop {

  echo -e
  read -p "Do you want to stop the Elrond bridge-relayer ? (Yy/Nn)" yn
  echo -e

  case $yn in
       [Yy]* )
            echo -e
            echo -e "${GREEN}Stopping Elrond bridge-relayer binary on host ${CYAN}$HOST${GREEN}...${NC}"
            echo -e
            sudo systemctl stop elrond-eth-bridge.service
            ;;
            
       [Nn]* )
            echo -e "${GREEN}Ok... exiting...${NC}"
            ;;

           * )
           echo -e "${GREEN}You have to either choose Yy or Nn... exiting...${NC}"
            ;;
      esac 

}

function cleanup {
  
  paths
  echo -e 
  read -p "Do you want to delete the Elrond bridge-relayer (Default No) ? (Yy/Nn)" yn
  echo -e
  case $yn in
       [Yy]* )
          echo -e "${RED}OK ! Cleaning everything !${NC}"
          echo -e
          echo -e "${GREEN}Stopping Elrond bridge-relayer binary on host ${CYAN}$HOST${GREEN}...${NC}"
          echo -e
          if [ -e /etc/systemd/system/elrond-eth-bridge.service ]; then sudo systemctl stop elrond-eth-bridge.service; fi
          echo -e "${GREEN}Erasing unit file and node folder for Elrond Node-$KILLINDEX...${NC}"
          echo -e
          if [ -e /etc/systemd/system/elrond-eth-bridge.service ]; then sudo rm /etc/systemd/system/elrond-eth-bridge.service; fi
          if [ -d $CUSTOM_HOME/bridge-relayer ]; then sudo rm -rf $CUSTOM_HOME/bridge-relayer; fi
          #Reload systemd after deleting node units
          sudo systemctl daemon-reload
          echo -e "${GREEN}Removing paths from .profile on host ${CYAN}$HOST${GREEN}...${NC}"
          echo -e
          sed -i 'N;$!P;$!D;$d' ~/.profile
          if [ -e $CUSTOM_HOME/.installedenvbridge ]; then rm $CUSTOM_HOME/.installedenvbridge; fi

          echo -e "${GREEN}Removing cloned repos from host ${CYAN}$HOST${GREEN}...${NC}"
          echo -e      
          if [ -d "$GOPATH/src/github.com/ElrondNetwork/elrond-eth-bridge" ]; then sudo rm -rf $GOPATH/src/github.com/ElrondNetwork/elrond-*; fi      
            ;;
            
       [Nn]* )
          echo -e "${GREEN}Fine ! Skipping cleanup on this machine...${NC}"
            ;;
            
           * )
           echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
            ;;
      esac

}

function get_logs {

  #Get journalctl logs
  LOGSTIME=$(date "+%Y%m%d-%H%M")

  #Make sure the log path exists
  mkdir -p $CUSTOM_HOME/relayer-logs
  echo -e
  echo -e "${GREEN}Getting logs for the Elrond bridge-relayer...${NC}"
  echo -e
  sudo journalctl --unit elrond-eth-bridge.service >> $CUSTOM_HOME/relayer-logs/elrond-eth-bridge.log

  #Compress the logs and erase files
  cd $CUSTOM_HOME/relayer-logs/ && tar -zcvf elrond-eth-bridge-$LOGSTIME.tar.gz *.log && rm *.log
  echo -e
  echo -e "${GREEN}---> Logs have been stored in the ${CYAN}~/relayer-logs${GREEN} folder...${NC}" 

}